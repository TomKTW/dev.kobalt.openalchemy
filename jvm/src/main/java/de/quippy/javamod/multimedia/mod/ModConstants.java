/*
 * @(#) ModConstants.java
 *
 * Created on 02.08.2020 by Daniel Becker
 * 
 *-----------------------------------------------------------------------
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *----------------------------------------------------------------------
 */
package de.quippy.javamod.multimedia.mod;

/**
 * @author Daniel Becker
 * @since 02.08.2020
 */
public class ModConstants
{
	/**
	 * Constructor for ModConstants
	 * never used!
	 */
	public ModConstants()
	{
		super();
	}

	/**
	 * Some constants
	 */
	public static final int BASEFREQUENCY = 8363;
	public static final int BASEPERIOD = 428;

	//The frequency tables supported
	public static final int STM_S3M_TABLE 	= 0x01;
	public static final int IT_LINEAR_TABLE = 0x02;
	public static final int IT_AMIGA_TABLE  = 0x04;
	public static final int AMIGA_TABLE 	= 0x08;
	public static final int XM_AMIGA_TABLE 	= 0x10;
	public static final int XM_LINEAR_TABLE = 0x20;

	// Mod Types
	public static final int MODTYPE_MOD	= 0x01;
	public static final int MODTYPE_XM	= 0x02;
	public static final int MODTYPE_STM	= 0x04;
	public static final int MODTYPE_S3M	= 0x08;
	public static final int MODTYPE_IT	= 0x10;
	public static final int MODTYPE_OMPT = 0x30; // OpenModPlugTracker - special IT
	public static final int MODTYPE_MPT = 0x50; // ModPlugTracker - special IT - LEGACY
	public static final int MODTYPE_FASTTRACKER = MODTYPE_MOD | MODTYPE_XM;
	public static final int MODTYPE_SCREAMTRACKER = MODTYPE_IT | MODTYPE_S3M | MODTYPE_STM;

	// PreAmp constants
	public static final int PREAMP_SHIFT = 8;
	public static final int MAX_MIXING_PREAMP = 1 << PREAMP_SHIFT; // the maximum sample preAmp
	public static final int DEFAULT_MIXING_PREAMP = 0x30; // Default for MODs without mixing preAmp in file
	// Log tables for pre-amp - legacy MPT
	public static final int [] PreAmpTable = new int[]
	{
		0x60, 0x60, 0x60, 0x70,	// 0-7
		0x80, 0x88, 0x90, 0x98,	// 8-15
		0xA0, 0xA4, 0xA8, 0xAC,	// 16-23
		0xB0, 0xB4, 0xB8, 0xBC,	// 24-31
	};

	// Volume constants
	public static final int VOLUMESHIFT = 6;
	public static final int MAXCHANNELVOLUME = 64 << VOLUMESHIFT;
	public static final int MAXVOLUMESHIFT = VOLUMESHIFT + 6 - 1; // This is the SHIFT for reducing VOLUMESHIFT (64), MAXCHANNELVOLUME (64) -1 because of extraAttenuation of 0 for OMPT 
	public static final int MAXGLOBALVOLUME = 128; // the maximum global volume
	public static final int MAXSAMPLEVOLUME = 64;  // the sample maximum global volume
	public static final int MAXFADEOUTVOLSHIFT = 16; // This is for loop fade out *and* NOTE_FADE!!!
	public static final int MAXFADEOUTVOLUME = 1<<MAXFADEOUTVOLSHIFT;
	public static final int FADEOUT_SUB = 0x100;
	
	// TuningPos shift for fraction
	public static final int SHIFT = 16;
	public static final int SHIFT_ONE = 1<<SHIFT;
	public static final int SHIFT_MASK = SHIFT_ONE-1;

	public static final int PERIOD_SHIFT = 4;
	// Interpolation shift samples and clipping
	public static final int SAMPLE_SHIFT = 12;
	public static final long CLIPP32BIT_MAX = 0x000000007FFFFFFFL;
	public static final long CLIPP32BIT_MIN = 0xFFFFFFFF80000000L;

	public static final int VOL_RAMP_FRAC = 4;
	public static final int VOL_RAMP_LEN  = 1<<VOL_RAMP_FRAC;
	public static final int VOLRAMPLEN_MS = 146;

	public static final int XBASS_DELAY = 14;
	public static final int XBASS_BUFFER = 64;

	public static final int SM_PCMS		= 	0x00;					// PCM 8 Bit Signed
	public static final int SM_PCMU		= 	0x01;					// PCM 8 Bit unsigned
	public static final int SM_PCMD 	=	0x02;					// PCM 8 Bit delta values
	public static final int SM_16BIT 	=	0x04;					// 16 BIT
	public static final int SM_STEREO	= 	0x08;					// STEREO
	public static final int SM_PCM16D 	=	SM_PCMD | SM_16BIT;		// PCM 16 Bit delta values
	// IT Packed (>2.14)
	public static final int SM_IT2148	=	0x10;					// IT 2.14  8Bit compressed - can have stereo set
	public static final int SM_IT21416	=	SM_IT2148 | SM_16BIT;	// IT 2.14 16Bit compressed - can have stereo set
	public static final int SM_IT2158	=	0x12;					// IT 2.15  8Bit compressed - can have stereo set
	public static final int SM_IT21516	=	SM_IT2158 | SM_16BIT;	// IT 2.15 16Bit compressed - can have stereo set

	// Loop Types
	public static final int LOOP_ON						=	0x01;
	public static final int LOOP_SUSTAIN_ON				=	0x02;
	public static final int LOOP_IS_PINGPONG			=	0x04;
	public static final int LOOP_SUSTAIN_IS_PINGPONG	=	0x08;

	// NNA Types - are defined by IT instrument, wrapped for readability
	public static final int NNA_CUT 		= 0x00;
	public static final int NNA_CONTINUE 	= 0x01;
	public static final int NNA_OFF 		= 0x02;
	public static final int NNA_FADE 		= 0x03;
	
	// DCT types (Duplicate Check Types)
	public static final int DCT_NONE		= 0x00;
	public static final int DCT_NOTE		= 0x01;
	public static final int DCT_SAMPLE		= 0x02;
	public static final int DCT_INSTRUMENT	= 0x03;
	public static final int DCT_PLUGIN		= 0x04;

	// DNA types (Duplicate Note Action)
	public static final int DNA_CUT			= 0x00;
	public static final int DNA_OFF			= 0x01;
	public static final int DNA_FADE		= 0x02;

	// KeyOff and NoteCut values
	public static final int KEY_OFF			= -1;
	public static final int NOTE_CUT		= -2;
	public static final int NOTE_FADE		= -3;

	// Filter Modes
	public static final int  FLTMODE_LOWPASS		= 0;
	public static final int  FLTMODE_HIGHPASS		= 1;
	public static final int  FLTMODE_BANDPASS		= 2;
	public static final int  FLTMODE_UNCHANGED		= 0xFF; // Definition of MPT Unchanged filter
	public static final int  FILTER_SHIFT_BITS		= 13;
	public static final long FILTER_PRECISION		= 1L << FILTER_SHIFT_BITS;
	public static final long HALF_FILTER_PRECISION	= FILTER_PRECISION>>1; 
	public static final int  FILTER_PREAMP_BITS		= 8;
	public static final long FILTER_CLIP_MAX		= CLIPP32BIT_MAX<<(FILTER_PREAMP_BITS + 1);
	public static final long FILTER_CLIP_MIN		= CLIPP32BIT_MIN<<(FILTER_PREAMP_BITS + 1);

	// Module flags
	public static final int SONG_EMBEDMIDICFG	= 0x00001;
	public static final int SONG_FASTVOLSLIDES	= 0x00002;
	public static final int SONG_ITOLDEFFECTS	= 0x00004;
	public static final int SONG_ITCOMPATMODE	= 0x00008;
	public static final int SONG_LINEARSLIDES	= 0x00010;
	public static final int SONG_EXFILTERRANGE	= 0x00020;
	public static final int SONG_AMIGALIMITS	= 0x00040;
	public static final int SONG_ISSTEREO		= 0x00080;
	
	// Player flags
	public static final int PLAYER_LOOP_DEACTIVATED = 0x00;
	public static final int PLAYER_LOOP_FADEOUT 	= 0x01;
	public static final int PLAYER_LOOP_IGNORE 		= 0x02;
	public static final int PLAYER_LOOP_LOOPSONG 	= 0x04;
	
	public static enum PanBits { Pan4Bit, Pan6Bit, Pan8Bit } 
	
	/**
	 * This is only used for translating periods into note names, for the
	 * patternElement.toString() method
	 */
	public static final int [] noteValues = new int []
	{
		 6848, 6464, 6096, 5760, 5424, 5120, 4832, 4560, 4304, 4064, 3840, 3624,
		 3424, 3232, 3048, 2880, 2712, 2560, 2416, 2280, 2152, 2032, 1920, 1812,
		 1712, 1616, 1524, 1440, 1356, 1280, 1208, 1140, 1076, 1016,  960,  907,
		  856,  808,  762,  720,  678,  640,  604,  570,  538,  508,  480,  453,
		  428,  404,  381,  360,  339,  320,  302,  285,  269,  254,  240,  226,
		  214,  202,  190,  180,  170,  160,  151,  143,  135,  127,  120,  113,
		  107,  101,   95,   90,   85,   80,   75,   71,   67,   63,   60,   56,
		   53,   50,   47,   45,   42,   40,   37,   35,   33,   31,   30,   28,
		   26,   25,   23,   22,   21,   20,   18,   17,   16,   15,   15,   14
	};
	// plus the note names
	private static final String [] noteStrings = new String[] { "C-", "C#", "D-", "D#", "E-", "F-", "F#", "G-", "G#", "A-", "A#", "H-" };

	/**
	 * From the Protracker V2.1A Playroutine, added one Octave above and two at the end
	 * to avoid array index overflows (mainly with arpeggios)
	 * Basic formula is 2^(index/12) so 856/(2^(1/12)) == 807.956 - the next note
	 * 856/(2^(12/12)) == 856/(2^1) == 856 / 2
	 */
	public static final int [][] protracker_fineTunedPeriods = new int[][]
    {
		{	// -8
			1814<<4, 1712<<4, 1615<<4, 1526<<4, 1437<<4, 1356<<4, 1280<<4, 1208<<4, 1140<<4, 1076<<4, 1017<<4,  961<<4,
			 907<<4,  856<<4,  808<<4,  762<<4,  720<<4,  678<<4,  640<<4,  604<<4,  570<<4,  538<<4,  508<<4,  480<<4,
	         453<<4,  428<<4,  404<<4,  381<<4,  360<<4,  339<<4,  320<<4,  302<<4,  285<<4,  269<<4,  254<<4,  240<<4,
	         226<<4,  214<<4,  202<<4,  190<<4,  180<<4,  170<<4,  160<<4,  151<<4,  143<<4,  135<<4,  127<<4,  120<<4,
			 113<<4,  107<<4,  101<<4,   95<<4,   90<<4,   85<<4,   79<<4,   75<<4,   71<<4,   67<<4,   64<<4,   59<<4,
			  56<<4,   53<<4,   50<<4,   48<<4,   44<<4,   42<<4,   39<<4,   37<<4,   35<<4,   33<<4,   32<<4,   30<<4
		},{	// -7
			1801<<4, 1700<<4, 1603<<4, 1515<<4, 1426<<4, 1346<<4, 1271<<4, 1199<<4, 1132<<4, 1069<<4, 1010<<4,  954<<4,
	         900<<4,  850<<4,  802<<4,  757<<4,  715<<4,  675<<4,  636<<4,  601<<4,  567<<4,  535<<4,  505<<4,  477<<4,
	         450<<4,  425<<4,  401<<4,  379<<4,  357<<4,  337<<4,  318<<4,  300<<4,  284<<4,  268<<4,  253<<4,  238<<4,
	         225<<4,  212<<4,  200<<4,  189<<4,  179<<4,  169<<4,  159<<4,  150<<4,  142<<4,  134<<4,  126<<4,  119<<4,
			 113<<4,  106<<4,  100<<4,   95<<4,   89<<4,   84<<4,   79<<4,   75<<4,   70<<4,   66<<4,   63<<4,   59<<4,
			  56<<4,   53<<4,   49<<4,   47<<4,   44<<4,   42<<4,   39<<4,   37<<4,   35<<4,   33<<4,   32<<4,   29<<4
		},{	// -6
			1788<<4, 1688<<4, 1591<<4, 1504<<4, 1416<<4, 1337<<4, 1261<<4, 1190<<4, 1124<<4, 1061<<4, 1003<<4,  947<<4,
	         894<<4,  844<<4,  796<<4,  752<<4,  709<<4,  670<<4,  632<<4,  597<<4,  563<<4,  532<<4,  502<<4,  474<<4,
	         447<<4,  422<<4,  398<<4,  376<<4,  355<<4,  335<<4,  316<<4,  298<<4,  282<<4,  266<<4,  251<<4,  237<<4,
	         223<<4,  211<<4,  199<<4,  188<<4,  177<<4,  167<<4,  158<<4,  149<<4,  141<<4,  133<<4,  125<<4,  118<<4,
			 112<<4,  105<<4,   99<<4,   94<<4,   89<<4,   84<<4,   78<<4,   74<<4,   70<<4,   66<<4,   63<<4,   58<<4,
			  55<<4,   52<<4,   49<<4,   47<<4,   44<<4,   42<<4,   39<<4,   37<<4,   34<<4,   32<<4,   31<<4,   29<<4
		},{	// -5
			1775<<4, 1675<<4, 1580<<4, 1493<<4, 1406<<4, 1327<<4, 1252<<4, 1182<<4, 1116<<4, 1053<<4,  995<<4,  940<<4,
			 887<<4,  838<<4,  791<<4,  746<<4,  704<<4,  665<<4,  628<<4,  592<<4,  559<<4,  528<<4,  498<<4,  470<<4,
	         444<<4,  419<<4,  395<<4,  373<<4,  352<<4,  332<<4,  314<<4,  296<<4,  280<<4,  264<<4,  249<<4,  235<<4,
	         222<<4,  209<<4,  198<<4,  187<<4,  176<<4,  166<<4,  157<<4,  148<<4,  140<<4,  132<<4,  125<<4,  118<<4,
			 111<<4,  105<<4,   98<<4,   93<<4,   88<<4,   83<<4,   78<<4,   74<<4,   69<<4,   65<<4,   62<<4,   58<<4,
			  55<<4,   52<<4,   49<<4,   47<<4,   44<<4,   41<<4,   38<<4,   36<<4,   34<<4,   32<<4,   31<<4,   29<<4
		},{	// -4
			1762<<4, 1663<<4, 1569<<4, 1482<<4, 1396<<4, 1318<<4, 1243<<4, 1173<<4, 1108<<4, 1046<<4,  988<<4,  934<<4,
	         881<<4,  832<<4,  785<<4,  741<<4,  699<<4,  660<<4,  623<<4,  588<<4,  555<<4,  524<<4,  494<<4,  467<<4,
	         441<<4,  416<<4,  392<<4,  370<<4,  350<<4,  330<<4,  312<<4,  294<<4,  278<<4,  262<<4,  247<<4,  233<<4,
	         220<<4,  208<<4,  196<<4,  185<<4,  175<<4,  165<<4,  156<<4,  147<<4,  139<<4,  131<<4,  123<<4,  117<<4,
			 110<<4,  104<<4,   98<<4,   93<<4,   87<<4,   82<<4,   77<<4,   73<<4,   69<<4,   65<<4,   62<<4,   58<<4,
			  55<<4,   51<<4,   48<<4,   46<<4,   43<<4,   41<<4,   38<<4,   36<<4,   34<<4,   32<<4,   31<<4,   29<<4
		},{	// -3
			1749<<4, 1651<<4, 1557<<4, 1472<<4, 1386<<4, 1308<<4, 1234<<4, 1165<<4, 1100<<4, 1038<<4,  981<<4,  927<<4,
	         875<<4,  826<<4,  779<<4,  736<<4,  694<<4,  655<<4,  619<<4,  584<<4,  551<<4,  520<<4,  491<<4,  463<<4,
	         437<<4,  413<<4,  390<<4,  368<<4,  347<<4,  328<<4,  309<<4,  292<<4,  276<<4,  260<<4,  245<<4,  232<<4,
	         219<<4,  206<<4,  195<<4,  184<<4,  174<<4,  164<<4,  155<<4,  146<<4,  138<<4,  130<<4,  123<<4,  116<<4,
			 109<<4,  103<<4,   97<<4,   92<<4,   87<<4,   82<<4,   77<<4,   73<<4,   68<<4,   64<<4,   61<<4,   57<<4,
			  54<<4,   51<<4,   48<<4,   46<<4,   43<<4,   41<<4,   38<<4,   36<<4,   34<<4,   32<<4,   31<<4,   29<<4
		},{	// -2
			1737<<4, 1640<<4, 1546<<4, 1461<<4, 1376<<4, 1299<<4, 1226<<4, 1157<<4, 1092<<4, 1031<<4,  974<<4,  920<<4,
	         868<<4,  820<<4,  774<<4,  730<<4,  689<<4,  651<<4,  614<<4,  580<<4,  547<<4,  516<<4,  487<<4,  460<<4,
	         434<<4,  410<<4,  387<<4,  365<<4,  345<<4,  325<<4,  307<<4,  290<<4,  274<<4,  258<<4,  244<<4,  230<<4,
	         217<<4,  205<<4,  193<<4,  183<<4,  172<<4,  163<<4,  154<<4,  145<<4,  137<<4,  129<<4,  122<<4,  115<<4,
			 109<<4,  102<<4,   96<<4,   91<<4,   86<<4,   81<<4,   76<<4,   72<<4,   68<<4,   64<<4,   61<<4,   57<<4,
			  54<<4,   51<<4,   48<<4,   46<<4,   43<<4,   41<<4,   38<<4,   36<<4,   33<<4,   31<<4,   30<<4,   28<<4
		},{	// -1
			1724<<4, 1628<<4, 1535<<4, 1450<<4, 1366<<4, 1289<<4, 1217<<4, 1148<<4, 1084<<4, 1023<<4,  967<<4,  914<<4,
	         862<<4,  814<<4,  768<<4,  725<<4,  684<<4,  646<<4,  610<<4,  575<<4,  543<<4,  513<<4,  484<<4,  457<<4,
		     431<<4,  407<<4,  384<<4,  363<<4,  342<<4,  323<<4,  305<<4,  288<<4,  272<<4,  256<<4,  242<<4,  228<<4,
	         216<<4,  203<<4,  192<<4,  181<<4,  171<<4,  161<<4,  152<<4,  144<<4,  136<<4,  128<<4,  121<<4,  114<<4,
			 108<<4,  102<<4,   96<<4,   91<<4,   86<<4,   81<<4,   76<<4,   72<<4,   67<<4,   63<<4,   60<<4,   56<<4,
			  53<<4,   50<<4,   47<<4,   45<<4,   42<<4,   40<<4,   37<<4,   35<<4,   33<<4,   31<<4,   30<<4,   28<<4
	    },{	// 0
			1712<<4, 1616<<4, 1524<<4, 1440<<4, 1356<<4, 1280<<4, 1208<<4, 1140<<4, 1076<<4, 1016<<4,  960<<4,  907<<4,
	         856<<4,  808<<4,  762<<4,  720<<4,  678<<4,  640<<4,  604<<4,  570<<4,  538<<4,  508<<4,  480<<4,  453<<4,
	         428<<4,  404<<4,  381<<4,  360<<4,  339<<4,  320<<4,  302<<4,  285<<4,  269<<4,  254<<4,  240<<4,  226<<4,
	         214<<4,  202<<4,  190<<4,  180<<4,  170<<4,  160<<4,  151<<4,  143<<4,  135<<4,  127<<4,  120<<4,  113<<4,
			 107<<4,  101<<4,   95<<4,   90<<4,   85<<4,   80<<4,   75<<4,   71<<4,   67<<4,   63<<4,   60<<4,   56<<4,
			  53<<4,   50<<4,   47<<4,   45<<4,   42<<4,   40<<4,   37<<4,   35<<4,   33<<4,   31<<4,   30<<4,   28<<4
		},{	// +1
			1700<<4, 1604<<4, 1513<<4, 1430<<4, 1346<<4, 1271<<4, 1199<<4, 1132<<4, 1068<<4, 1009<<4,  953<<4,  900<<4,
	         850<<4,  802<<4,  757<<4,  715<<4,  674<<4,  637<<4,  601<<4,  567<<4,  535<<4,  505<<4,  477<<4,  450<<4,
	         425<<4,  401<<4,  379<<4,  357<<4,  337<<4,  318<<4,  300<<4,  284<<4,  268<<4,  253<<4,  239<<4,  225<<4,
	         213<<4,  201<<4,  189<<4,  179<<4,  169<<4,  159<<4,  150<<4,  142<<4,  134<<4,  126<<4,  119<<4,  113<<4,
			 106<<4,  100<<4,   94<<4,   89<<4,   84<<4,   79<<4,   74<<4,   70<<4,   67<<4,   63<<4,   60<<4,   56<<4,
			  53<<4,   50<<4,   47<<4,   45<<4,   42<<4,   40<<4,   37<<4,   35<<4,   33<<4,   31<<4,   30<<4,   28<<4
		},{	// +2
			1687<<4, 1593<<4, 1502<<4, 1419<<4, 1337<<4, 1262<<4, 1191<<4, 1124<<4, 1061<<4, 1001<<4,  946<<4,  894<<4,
	         844<<4,  796<<4,  752<<4,  709<<4,  670<<4,  632<<4,  597<<4,  563<<4,  532<<4,  502<<4,  474<<4,  447<<4,
	         422<<4,  398<<4,  376<<4,  355<<4,  335<<4,  316<<4,  298<<4,  282<<4,  266<<4,  251<<4,  237<<4,  224<<4,
	         211<<4,  199<<4,  188<<4,  177<<4,  167<<4,  158<<4,  149<<4,  141<<4,  133<<4,  125<<4,  118<<4,  112<<4,
			 105<<4,  100<<4,   94<<4,   89<<4,   84<<4,   79<<4,   74<<4,   70<<4,   66<<4,   62<<4,   59<<4,   55<<4,
			  52<<4,   49<<4,   46<<4,   44<<4,   41<<4,   39<<4,   36<<4,   34<<4,   33<<4,   31<<4,   30<<4,   28<<4
		},{	// +3
			1675<<4, 1581<<4, 1491<<4, 1409<<4, 1327<<4, 1253<<4, 1182<<4, 1116<<4, 1053<<4,  994<<4,  939<<4,  888<<4,
	         838<<4,  791<<4,  746<<4,  704<<4,  665<<4,  628<<4,  592<<4,  559<<4,  528<<4,  498<<4,  470<<4,  444<<4,
	         419<<4,  395<<4,  373<<4,  352<<4,  332<<4,  314<<4,  296<<4,  280<<4,  264<<4,  249<<4,  235<<4,  222<<4,
	         209<<4,  198<<4,  187<<4,  176<<4,  166<<4,  157<<4,  148<<4,  140<<4,  132<<4,  125<<4,  118<<4,  111<<4,
			 105<<4,   99<<4,   93<<4,   88<<4,   83<<4,   78<<4,   73<<4,   69<<4,   66<<4,   62<<4,   59<<4,   55<<4,
			  52<<4,   49<<4,   46<<4,   44<<4,   41<<4,   39<<4,   36<<4,   34<<4,   32<<4,   30<<4,   29<<4,   27<<4
		},{	// +4
			1663<<4, 1570<<4, 1481<<4, 1399<<4, 1317<<4, 1244<<4, 1174<<4, 1108<<4, 1045<<4,  987<<4,  933<<4,  881<<4,
			 832<<4,  785<<4,  741<<4,  699<<4,  660<<4,  623<<4,  588<<4,  555<<4,  524<<4,  495<<4,  467<<4,  441<<4,
	         416<<4,  392<<4,  370<<4,  350<<4,  330<<4,  312<<4,  294<<4,  278<<4,  262<<4,  247<<4,  233<<4,  220<<4,
	         208<<4,  196<<4,  185<<4,  175<<4,  165<<4,  156<<4,  147<<4,  139<<4,  131<<4,  124<<4,  117<<4,  110<<4,
			 104<<4,   98<<4,   92<<4,   87<<4,   83<<4,   78<<4,   73<<4,   69<<4,   65<<4,   61<<4,   58<<4,   54<<4,
			  51<<4,   49<<4,   46<<4,   44<<4,   41<<4,   39<<4,   36<<4,   34<<4,   32<<4,   30<<4,   29<<4,   27<<4
		},{	// +5
			1651<<4, 1559<<4, 1470<<4, 1389<<4, 1308<<4, 1235<<4, 1165<<4, 1100<<4, 1038<<4,  980<<4,  926<<4,  875<<4,
	         826<<4,  779<<4,  736<<4,  694<<4,  655<<4,  619<<4,  584<<4,  551<<4,  520<<4,  491<<4,  463<<4,  437<<4,
	         413<<4,  390<<4,  368<<4,  347<<4,  328<<4,  309<<4,  292<<4,  276<<4,  260<<4,  245<<4,  232<<4,  219<<4,
	         206<<4,  195<<4,  184<<4,  174<<4,  164<<4,  155<<4,  146<<4,  138<<4,  130<<4,  123<<4,  116<<4,  109<<4,
			 103<<4,   97<<4,   92<<4,   87<<4,   82<<4,   77<<4,   72<<4,   68<<4,   65<<4,   61<<4,   58<<4,   54<<4,
			  51<<4,   48<<4,   45<<4,   43<<4,   41<<4,   39<<4,   36<<4,   34<<4,   32<<4,   30<<4,   29<<4,   27<<4
		},{	// +6
			1639<<4, 1547<<4, 1459<<4, 1379<<4, 1299<<4, 1226<<4, 1157<<4, 1092<<4, 1030<<4,  973<<4,  919<<4,  869<<4,
	         820<<4,  774<<4,  730<<4,  689<<4,  651<<4,  614<<4,  580<<4,  547<<4,  516<<4,  487<<4,  460<<4,  434<<4,
	         410<<4,  387<<4,  365<<4,  345<<4,  325<<4,  307<<4,  290<<4,  274<<4,  258<<4,  244<<4,  230<<4,  217<<4,
	         205<<4,  193<<4,  183<<4,  172<<4,  163<<4,  154<<4,  145<<4,  137<<4,  129<<4,  122<<4,  115<<4,  109<<4,
			 102<<4,   97<<4,   91<<4,   86<<4,   81<<4,   77<<4,   72<<4,   68<<4,   64<<4,   60<<4,   57<<4,   54<<4,
			  51<<4,   48<<4,   45<<4,   43<<4,   40<<4,   38<<4,   35<<4,   34<<4,   32<<4,   30<<4,   29<<4,   27<<4
		},{	// +7
			1628<<4, 1536<<4, 1449<<4, 1369<<4, 1289<<4, 1217<<4, 1148<<4, 1084<<4, 1023<<4,  966<<4,  913<<4,  862<<4,
	         814<<4,  768<<4,  725<<4,  684<<4,  646<<4,  610<<4,  575<<4,  543<<4,  513<<4,  484<<4,  457<<4,  431<<4,
	         407<<4,  384<<4,  363<<4,  342<<4,  323<<4,  305<<4,  288<<4,  272<<4,  256<<4,  242<<4,  228<<4,  216<<4,
	         204<<4,  192<<4,  181<<4,  171<<4,  161<<4,  152<<4,  144<<4,  136<<4,  128<<4,  121<<4,  114<<4,  108<<4,
			 102<<4,   96<<4,   90<<4,   86<<4,   81<<4,   76<<4,   71<<4,   68<<4,   64<<4,   60<<4,   57<<4,   53<<4,
			  50<<4,   48<<4,   45<<4,   43<<4,   40<<4,   38<<4,   35<<4,   33<<4,   31<<4,   29<<4,   29<<4,   27<<4
		}
    };

    /**
	 * Basic C4 S3M/IT --> These Values are from above (Octave 0)!
	 */
	public static final int FreqS3MTable[] = new int[]
	{
		1712, 1616, 1524, 1440, 1356, 1280, 1208, 1140, 1076, 1016,  960,  907
	};
	
	/**
	 * This table is used by the stm, s3m, it mods, manly for the
	 * old "fineTune" effekt as they are downward compatible
	 * calculated by 8363*2^((i-8)/(12*8))
	 */
	public static final int [] it_fineTuneTable = new int[]
	{
		7895, 7941, 7985, 8046, 8107, 8169, 8232, 8280,
		8363, 8413, 8463, 8529, 8581, 8651, 8723, 8757
	};

	/**
	 * This is used by ImpulseTracker Arpeggios, as with Impulstracker
	 * Arpeggios are calculated on the current pitch.
	 * These are the half tone fractions 2^(halfTone/12) * HALFTONE_FAC
	 * for precision
	 * --> see also LinearSlideUpTable (index * 16), which is wrongly rounded
	 */
	public static long HALFTONE_SHIFT = 16;
	public static long HALFTONE_FAC = 1<<HALFTONE_SHIFT;
	public static final int [] halfToneTab = new int[]
	{
		65536, 61858, 58386, 55109, 52016, 49097, 46341, 43740, 
		41285, 38968, 36781, 34716, 32768, 30929, 29193, 27554	
	};

	/**
	 * Used by IT Tracker Mods if linear frequencies enabled
	 */
	public static final int [] FineLinearSlideDownTable = new int[]
	{
		65536, 65595, 65654, 65714,	65773, 65832, 65892, 65951,
		66011, 66071, 66130, 66190, 66250, 66309, 66369, 66429
	};

	/**
	 * Used by IT Tracker Mods if linear frequencies enabled
	 */
	public static final int [] FineLinearSlideUpTable = new int[]
	{
		65535, 65477, 65418, 65359, 65300, 65241, 65182, 65123,
		65065, 65006, 64947, 64889, 64830, 64772, 64713, 64655
	};

	/**
	 * Pitch Envelope Slider Table
	 */
	public static final int [] LinearSlideDownTable = new int[] 
	{
		 65536,  65773,  66011,  66250,  66489,  66730,  66971,  67213,
		 67456,  67700,  67945,  68191,  68438,  68685,  68933,  69183,
		 69433,  69684,  69936,  70189,  70443,  70698,  70953,  71210,
		 71468,  71726,  71985,  72246,  72507,  72769,  73032,  73297,
		 73562,  73828,  74095,  74363,  74632,  74902,  75172,  75444,
		 75717,  75991,  76266,  76542,  76819,  77096,  77375,  77655,
		 77936,  78218,  78501,  78785,  79069,  79355,  79642,  79930,
		 80220,  80510,  80801,  81093,  81386,  81681,  81976,  82273,
		 82570,  82869,  83169,  83469,  83771,  84074,  84378,  84683,
		 84990,  85297,  85606,  85915,  86226,  86538,  86851,  87165,
		 87480,  87796,  88114,  88433,  88752,  89073,  89396,  89719,
		 90043,  90369,  90696,  91024,  91353,  91684,  92015,  92348,
		 92682,  93017,  93354,  93691,  94030,  94370,  94711,  95054,
		 95398,  95743,  96089,  96436,  96785,  97135,  97487,  97839,
		 98193,  98548,  98905,  99262,  99621,  99982, 100343, 100706,
		101070, 101436, 101803, 102171, 102540, 102911, 103283, 103657,
		104032, 104408, 104786, 105165, 105545, 105927, 106310, 106694,
		107080, 107468, 107856, 108246, 108638, 109031, 109425, 109821,
		110218, 110617, 111017, 111418, 111821, 112226, 112631, 113039,
		113448, 113858, 114270, 114683, 115098, 115514, 115932, 116351,
		116772, 117194, 117618, 118043, 118470, 118899, 119329, 119760,
		120194, 120628, 121065, 121502, 121942, 122383, 122825, 123270,
		123715, 124163, 124612, 125063, 125515, 125969, 126425, 126882,
		127341, 127801, 128263, 128727, 129193, 129660, 130129, 130600,
		131072, 131546, 132022, 132499, 132978, 133459, 133942, 134427,
		134913, 135401, 135890, 136382, 136875, 137370, 137867, 138366,
		138866, 139368, 139872, 140378, 140886, 141395, 141907, 142420,
		142935, 143452, 143971, 144491, 145014, 145539, 146065, 146593,
		147123, 147655, 148189, 148725, 149263, 149803, 150345, 150889,
		151434, 151982, 152532, 153083, 153637, 154193, 154750, 155310,
		155872, 156435, 157001, 157569, 158139, 158711, 159285, 159861,
		160439, 161019, 161602, 162186, 162773, 163361, 163952, 164545
	};

	/**
	 * Pitch Envelope Slider Table
	 */
	public static final int [] LinearSlideUpTable = new int [] 
	{
		65536, 65300, 65065, 64830, 64596, 64364, 64132, 63901,
		63670, 63441, 63212, 62984, 62757, 62531, 62306, 62081,
		61858, 61635, 61413, 61191, 60971, 60751, 60532, 60314,
		60097, 59880, 59664, 59449, 59235, 59022, 58809, 58597,
		58386, 58176, 57966, 57757, 57549, 57341, 57135, 56929,
		56724, 56519, 56316, 56113, 55911, 55709, 55508, 55308,
		55109, 54910, 54713, 54515, 54319, 54123, 53928, 53734,
		53540, 53347, 53155, 52963, 52773, 52582, 52393, 52204,
		52016, 51829, 51642, 51456, 51270, 51085, 50901, 50718,
		50535, 50353, 50172, 49991, 49811, 49631, 49452, 49274,
		49097, 48920, 48743, 48568, 48393, 48218, 48044, 47871,
		47699, 47527, 47356, 47185, 47015, 46846, 46677, 46509,
		46341, 46174, 46008, 45842, 45677, 45512, 45348, 45185,
		45022, 44859, 44698, 44537, 44376, 44216, 44057, 43898,
		43740, 43582, 43425, 43269, 43113, 42958, 42803, 42649,
		42495, 42342, 42189, 42037, 41886, 41735, 41584, 41434,
		41285, 41136, 40988, 40840, 40693, 40547, 40400, 40255,
		40110, 39965, 39821, 39678, 39535, 39392, 39250, 39109,
		38968, 38828, 38688, 38548, 38409, 38271, 38133, 37996,
		37859, 37722, 37586, 37451, 37316, 37181, 37047, 36914,
		36781, 36648, 36516, 36385, 36254, 36123, 35993, 35863,
		35734, 35605, 35477, 35349, 35221, 35095, 34968, 34842,
		34716, 34591, 34467, 34343, 34219, 34095, 33973, 33850,
		33728, 33607, 33486, 33365, 33245, 33125, 33005, 32887,
		32768, 32650, 32532, 32415, 32298, 32182, 32066, 31950,
		31835, 31720, 31606, 31492, 31379, 31266, 31153, 31041,
		30929, 30817, 30706, 30596, 30485, 30376, 30266, 30157,
		30048, 29940, 29832, 29725, 29618, 29511, 29405, 29299,
		29193, 29088, 28983, 28879, 28774, 28671, 28567, 28464,
		28362, 28260, 28158, 28056, 27955, 27855, 27754, 27654,
		27554, 27455, 27356, 27258, 27159, 27062, 26964, 26867,
		26770, 26674, 26577, 26482, 26386, 26291, 26196, 26102
	};

	/**
	 * These are the values of the first octave of the above protracker_fineTunedPeriods
	 * This table is used by the XM_AMIGA_TABLE routine
	 */
	public static final int LOGFAC = 128; // i.e. 3 Ocatves plus 4 bit qualityshift --> 1<<7=128
	public static final int [] logtab = new int[]
    {
		LOGFAC*907, LOGFAC*900, LOGFAC*894, LOGFAC*887, LOGFAC*881, LOGFAC*875, LOGFAC*868, LOGFAC*862,
		LOGFAC*856, LOGFAC*850, LOGFAC*844, LOGFAC*838, LOGFAC*832, LOGFAC*826, LOGFAC*820, LOGFAC*814,
		LOGFAC*808, LOGFAC*802, LOGFAC*796, LOGFAC*791, LOGFAC*785, LOGFAC*779, LOGFAC*774, LOGFAC*768,
		LOGFAC*762, LOGFAC*757, LOGFAC*752, LOGFAC*746, LOGFAC*741, LOGFAC*736, LOGFAC*730, LOGFAC*725,
		LOGFAC*720, LOGFAC*715, LOGFAC*709, LOGFAC*704, LOGFAC*699, LOGFAC*694, LOGFAC*689, LOGFAC*684,
		LOGFAC*678, LOGFAC*675, LOGFAC*670, LOGFAC*665, LOGFAC*660, LOGFAC*655, LOGFAC*651, LOGFAC*646,
		LOGFAC*640, LOGFAC*636, LOGFAC*632, LOGFAC*628, LOGFAC*623, LOGFAC*619, LOGFAC*614, LOGFAC*610,
		LOGFAC*604, LOGFAC*601, LOGFAC*597, LOGFAC*592, LOGFAC*588, LOGFAC*584, LOGFAC*580, LOGFAC*575,
		LOGFAC*570, LOGFAC*567, LOGFAC*563, LOGFAC*559, LOGFAC*555, LOGFAC*551, LOGFAC*547, LOGFAC*543,
		LOGFAC*538, LOGFAC*535, LOGFAC*532, LOGFAC*528, LOGFAC*524, LOGFAC*520, LOGFAC*516, LOGFAC*513,
		LOGFAC*508, LOGFAC*505, LOGFAC*502, LOGFAC*498, LOGFAC*494, LOGFAC*491, LOGFAC*487, LOGFAC*484,
		LOGFAC*480, LOGFAC*477, LOGFAC*474, LOGFAC*470, LOGFAC*467, LOGFAC*463, LOGFAC*460, LOGFAC*457,
		LOGFAC*453, LOGFAC*450, LOGFAC*447, LOGFAC*443, LOGFAC*440, LOGFAC*437, LOGFAC*434, LOGFAC*431,
		LOGFAC*428 //!Need this for interpolating!
	};
	
	/**
	 * Triton's linear periods to frequency translation table (for XM modules)
	 */
	public static final int [] lintab = new int[]
	{
		535232, 534749, 534266, 533784, 533303, 532822, 532341, 531861, 531381, 530902, 530423, 529944, 529466, 528988, 528511, 528034,
		527558, 527082, 526607, 526131, 525657, 525183, 524709, 524236, 523763, 523290, 522818, 522346, 521875, 521404, 520934, 520464,
		519994, 519525, 519057, 518588, 518121, 517653, 517186, 516720, 516253, 515788, 515322, 514858, 514393, 513929, 513465, 513002,
		512539, 512077, 511615, 511154, 510692, 510232, 509771, 509312, 508852, 508393, 507934, 507476, 507018, 506561, 506104, 505647,
		505191, 504735, 504280, 503825, 503371, 502917, 502463, 502010, 501557, 501104, 500652, 500201, 499749, 499298, 498848, 498398,
		497948, 497499, 497050, 496602, 496154, 495706, 495259, 494812, 494366, 493920, 493474, 493029, 492585, 492140, 491696, 491253,
		490809, 490367, 489924, 489482, 489041, 488600, 488159, 487718, 487278, 486839, 486400, 485961, 485522, 485084, 484647, 484210,
		483773, 483336, 482900, 482465, 482029, 481595, 481160, 480726, 480292, 479859, 479426, 478994, 478562, 478130, 477699, 477268,
		476837, 476407, 475977, 475548, 475119, 474690, 474262, 473834, 473407, 472979, 472553, 472126, 471701, 471275, 470850, 470425,
		470001, 469577, 469153, 468730, 468307, 467884, 467462, 467041, 466619, 466198, 465778, 465358, 464938, 464518, 464099, 463681,
		463262, 462844, 462427, 462010, 461593, 461177, 460760, 460345, 459930, 459515, 459100, 458686, 458272, 457859, 457446, 457033,
		456621, 456209, 455797, 455386, 454975, 454565, 454155, 453745, 453336, 452927, 452518, 452110, 451702, 451294, 450887, 450481,
		450074, 449668, 449262, 448857, 448452, 448048, 447644, 447240, 446836, 446433, 446030, 445628, 445226, 444824, 444423, 444022,
		443622, 443221, 442821, 442422, 442023, 441624, 441226, 440828, 440430, 440033, 439636, 439239, 438843, 438447, 438051, 437656,
		437261, 436867, 436473, 436079, 435686, 435293, 434900, 434508, 434116, 433724, 433333, 432942, 432551, 432161, 431771, 431382,
		430992, 430604, 430215, 429827, 429439, 429052, 428665, 428278, 427892, 427506, 427120, 426735, 426350, 425965, 425581, 425197,
		424813, 424430, 424047, 423665, 423283, 422901, 422519, 422138, 421757, 421377, 420997, 420617, 420237, 419858, 419479, 419101,
		418723, 418345, 417968, 417591, 417214, 416838, 416462, 416086, 415711, 415336, 414961, 414586, 414212, 413839, 413465, 413092,
		412720, 412347, 411975, 411604, 411232, 410862, 410491, 410121, 409751, 409381, 409012, 408643, 408274, 407906, 407538, 407170,
		406803, 406436, 406069, 405703, 405337, 404971, 404606, 404241, 403876, 403512, 403148, 402784, 402421, 402058, 401695, 401333,
		400970, 400609, 400247, 399886, 399525, 399165, 398805, 398445, 398086, 397727, 397368, 397009, 396651, 396293, 395936, 395579,
		395222, 394865, 394509, 394153, 393798, 393442, 393087, 392733, 392378, 392024, 391671, 391317, 390964, 390612, 390259, 389907,
		389556, 389204, 388853, 388502, 388152, 387802, 387452, 387102, 386753, 386404, 386056, 385707, 385359, 385012, 384664, 384317,
		383971, 383624, 383278, 382932, 382587, 382242, 381897, 381552, 381208, 380864, 380521, 380177, 379834, 379492, 379149, 378807,
		378466, 378124, 377783, 377442, 377102, 376762, 376422, 376082, 375743, 375404, 375065, 374727, 374389, 374051, 373714, 373377,
		373040, 372703, 372367, 372031, 371695, 371360, 371025, 370690, 370356, 370022, 369688, 369355, 369021, 368688, 368356, 368023,
		367691, 367360, 367028, 366697, 366366, 366036, 365706, 365376, 365046, 364717, 364388, 364059, 363731, 363403, 363075, 362747,
		362420, 362093, 361766, 361440, 361114, 360788, 360463, 360137, 359813, 359488, 359164, 358840, 358516, 358193, 357869, 357547,
		357224, 356902, 356580, 356258, 355937, 355616, 355295, 354974, 354654, 354334, 354014, 353695, 353376, 353057, 352739, 352420,
		352103, 351785, 351468, 351150, 350834, 350517, 350201, 349885, 349569, 349254, 348939, 348624, 348310, 347995, 347682, 347368,
		347055, 346741, 346429, 346116, 345804, 345492, 345180, 344869, 344558, 344247, 343936, 343626, 343316, 343006, 342697, 342388,
		342079, 341770, 341462, 341154, 340846, 340539, 340231, 339924, 339618, 339311, 339005, 338700, 338394, 338089, 337784, 337479,
		337175, 336870, 336566, 336263, 335959, 335656, 335354, 335051, 334749, 334447, 334145, 333844, 333542, 333242, 332941, 332641,
		332341, 332041, 331741, 331442, 331143, 330844, 330546, 330247, 329950, 329652, 329355, 329057, 328761, 328464, 328168, 327872,
		327576, 327280, 326985, 326690, 326395, 326101, 325807, 325513, 325219, 324926, 324633, 324340, 324047, 323755, 323463, 323171,
		322879, 322588, 322297, 322006, 321716, 321426, 321136, 320846, 320557, 320267, 319978, 319690, 319401, 319113, 318825, 318538,
		318250, 317963, 317676, 317390, 317103, 316817, 316532, 316246, 315961, 315676, 315391, 315106, 314822, 314538, 314254, 313971,
		313688, 313405, 313122, 312839, 312557, 312275, 311994, 311712, 311431, 311150, 310869, 310589, 310309, 310029, 309749, 309470,
		309190, 308911, 308633, 308354, 308076, 307798, 307521, 307243, 306966, 306689, 306412, 306136, 305860, 305584, 305308, 305033,
		304758, 304483, 304208, 303934, 303659, 303385, 303112, 302838, 302565, 302292, 302019, 301747, 301475, 301203, 300931, 300660,
		300388, 300117, 299847, 299576, 299306, 299036, 298766, 298497, 298227, 297958, 297689, 297421, 297153, 296884, 296617, 296349,
		296082, 295815, 295548, 295281, 295015, 294749, 294483, 294217, 293952, 293686, 293421, 293157, 292892, 292628, 292364, 292100,
		291837, 291574, 291311, 291048, 290785, 290523, 290261, 289999, 289737, 289476, 289215, 288954, 288693, 288433, 288173, 287913,
		287653, 287393, 287134, 286875, 286616, 286358, 286099, 285841, 285583, 285326, 285068, 284811, 284554, 284298, 284041, 283785,
		283529, 283273, 283017, 282762, 282507, 282252, 281998, 281743, 281489, 281235, 280981, 280728, 280475, 280222, 279969, 279716,
		279464, 279212, 278960, 278708, 278457, 278206, 277955, 277704, 277453, 277203, 276953, 276703, 276453, 276204, 275955, 275706,
		275457, 275209, 274960, 274712, 274465, 274217, 273970, 273722, 273476, 273229, 272982, 272736, 272490, 272244, 271999, 271753,
		271508, 271263, 271018, 270774, 270530, 270286, 270042, 269798, 269555, 269312, 269069, 268826, 268583, 268341, 268099, 267857
	};

	/**
	 * Sinus table
	 */
	public static final int [] ModSinusTable = new int[]
	{
		   0,   24,   49,   74,   97,  120,  141,  161,  180,  197,  212,  224,  235,  244,  250,  253,
		 255,  253,  250,  244,  235,  224,  212,  197,  180,  161,  141,  120,   97,   74,   49,   24,
		   0,  -24,  -49,  -74,  -97, -120, -141, -161, -180, -197, -212, -224, -235, -244, -250, -253,
		-255, -253, -250, -244, -235, -224, -212, -197, -180, -161, -141, -120,  -97,  -74,  -49,  -24
	};

	/**
	 * Triangle wave table (ramp down)
	 */
	public static final int [] ModRampDownTable = new int[]
	{
		   0,   -8,  -16,  -24,  -32,  -40,  -48,  -56,  -64,  -72,  -80,  -88,  -96, -104, -112, -120,
		-128, -136, -144, -152, -160, -168, -176, -184, -192, -200, -208, -216, -224, -232, -240, -248,
		 255,  247,  239,  231,  223,  215,  207,  199,  191,  183,  175,  167,  159,  151,  143,  135,
		 127,  119,  113,  103,   95,   87,   79,   71,   63,   55,   47,   39,   31,   23,   15,    7,
	};

	/**
	 * Square wave table (normaly useless, but this keeps the used logic the same)
	 */
	public static final int [] ModSquareTable = new int []
	{
		 255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
		 255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
		-255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255,
		-255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255
	};

	/**
	 * Random wave table
	 */
	public static final int [] ModRandomTable = new int []
	{
		 196, -254,  -86,  176,  204,   82, -130, -188,  250,   40, -142, -172, -140,  -64,  -32, -192,
		  34,  144,  214,  -10,  232, -138, -124,  -80,   20, -122,  130,  218,  -36,  -76,  -26, -152,
		 -46,  176,   42, -188,   16,  212,   42, -224,   12,  218,   40, -176,  -60,   18, -254,  236,
		  84,  -68,  178,   -8, -102, -144,   42,  -58,  224,  246,  168, -202, -184,  196, -108, -190
	};
	/**
	 * The FT2 vibrato table
	 */
	// Impulse Tracker sinus table (ITTECH.TXT)
	public static final int [] ITSinusTable = new int[]
	{
		  0,  2,  3,  5,  6,  8,  9, 11, 12, 14, 16, 17, 19, 20, 22, 23,
		 24, 26, 27, 29, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44,
		 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 56, 57, 58, 59,
		 59, 60, 60, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 64, 64,
		 64, 64, 64, 64, 64, 64, 63, 63, 63, 62, 62, 62, 61, 61, 60, 60,
		 59, 59, 58, 57, 56, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46,
		 45, 44, 43, 42, 41, 39, 38, 37, 36, 34, 33, 32, 30, 29, 27, 26,
	 	 24, 23, 22, 20, 19, 17, 16, 14, 12, 11,  9,  8,  6,  5,  3,  2,
	 	  0, -2, -3, -5, -6, -8, -9,-11,-12,-14,-16,-17,-19,-20,-22,-23,
		-24,-26,-27,-29,-30,-32,-33,-34,-36,-37,-38,-39,-41,-42,-43,-44,
		-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-56,-57,-58,-59,
		-59,-60,-60,-61,-61,-62,-62,-62,-63,-63,-63,-64,-64,-64,-64,-64,
		-64,-64,-64,-64,-64,-64,-63,-63,-63,-62,-62,-62,-61,-61,-60,-60,
		-59,-59,-58,-57,-56,-56,-55,-54,-53,-52,-51,-50,-49,-48,-47,-46,
		-45,-44,-43,-42,-41,-39,-38,-37,-36,-34,-33,-32,-30,-29,-27,-26,
		-24,-23,-22,-20,-19,-17,-16,-14,-12,-11, -9, -8, -6, -5, -3, -2,
	};

	/**
	 * The table for volume slide (Qxy)
	 */
	public static final int [] ft2TwoThirds = new int []
	{
	 	 0,  0,  1,  1,  2,  3,  3,  4,  5,  5,  6,  6,  7,  8,  8,  9,
	 	10, 10, 11, 11, 12, 13, 13, 14, 15, 15, 16, 16, 17, 18, 18, 19,
	 	20, 20, 21, 21, 22, 23, 23, 24, 25, 25, 26, 26, 27, 28, 28, 29,
	 	30, 30, 31, 31, 32, 33, 33, 34, 35, 35, 36, 36, 37, 38, 38, 39
	 };

	/**
	 * FT2's square root panning law LUT.
	 * Formula to generate this table: round(65536 * sqrt(n / 256))
	 */
	public static final int [] XMPanningTable =
	{
			0,  4096,  5793,  7094,  8192,  9159, 10033, 10837, 11585, 12288, 12953, 13585, 14189, 14768, 15326, 15864,
		16384, 16888, 17378, 17854, 18318, 18770, 19212, 19644, 20066, 20480, 20886, 21283, 21674, 22058, 22435, 22806,
		23170, 23530, 23884, 24232, 24576, 24915, 25249, 25580, 25905, 26227, 26545, 26859, 27170, 27477, 27780, 28081,
		28378, 28672, 28963, 29251, 29537, 29819, 30099, 30377, 30652, 30924, 31194, 31462, 31727, 31991, 32252, 32511,
		32768, 33023, 33276, 33527, 33776, 34024, 34270, 34514, 34756, 34996, 35235, 35472, 35708, 35942, 36175, 36406,
		36636, 36864, 37091, 37316, 37540, 37763, 37985, 38205, 38424, 38642, 38858, 39073, 39287, 39500, 39712, 39923,
		40132, 40341, 40548, 40755, 40960, 41164, 41368, 41570, 41771, 41972, 42171, 42369, 42567, 42763, 42959, 43154,
		43348, 43541, 43733, 43925, 44115, 44305, 44494, 44682, 44869, 45056, 45242, 45427, 45611, 45795, 45977, 46160,
		46341, 46522, 46702, 46881, 47059, 47237, 47415, 47591, 47767, 47942, 48117, 48291, 48465, 48637, 48809, 48981,
		49152, 49322, 49492, 49661, 49830, 49998, 50166, 50332, 50499, 50665, 50830, 50995, 51159, 51323, 51486, 51649,
		51811, 51972, 52134, 52294, 52454, 52614, 52773, 52932, 53090, 53248, 53405, 53562, 53719, 53874, 54030, 54185,
		54340, 54494, 54647, 54801, 54954, 55106, 55258, 55410, 55561, 55712, 55862, 56012, 56162, 56311, 56459, 56608,
		56756, 56903, 57051, 57198, 57344, 57490, 57636, 57781, 57926, 58071, 58215, 58359, 58503, 58646, 58789, 58931,
		59073, 59215, 59357, 59498, 59639, 59779, 59919, 60059, 60199, 60338, 60477, 60615, 60753, 60891, 61029, 61166,
		61303, 61440, 61576, 61712, 61848, 61984, 62119, 62254, 62388, 62523, 62657, 62790, 62924, 63057, 63190, 63323,
		63455, 63587, 63719, 63850, 63982, 64113, 64243, 64374, 64504, 64634, 64763, 64893, 65022, 65151, 65279, 65408,
	};

	/**
	 *  LUT for 2 * damping factor
	 */
	public static double ResonanceTable[] =
	{
		1.0000000000000000d, 0.9786446094512940d, 0.9577452540397644d, 0.9372922182083130d,
		0.9172759056091309d, 0.8976871371269226d, 0.8785166740417481d, 0.8597555756568909d,
		0.8413951396942139d, 0.8234267830848694d, 0.8058421611785889d, 0.7886331081390381d,
		0.7717915177345276d, 0.7553095817565918d, 0.7391796708106995d, 0.7233941555023193d,
		0.7079457640647888d, 0.6928272843360901d, 0.6780316829681397d, 0.6635520458221436d,
		0.6493816375732422d, 0.6355138421058655d, 0.6219421625137329d, 0.6086603403091431d,
		0.5956621170043945d, 0.5829415321350098d, 0.5704925656318665d, 0.5583094954490662d,
		0.5463865399360657d, 0.5347182154655457d, 0.5232990980148315d, 0.5121238231658936d,
		0.5011872053146362d, 0.4904841780662537d, 0.4800096750259399d, 0.4697588682174683d,
		0.4597269892692566d, 0.4499093294143677d, 0.4403013288974762d, 0.4308985173702240d,
		0.4216965138912201d, 0.4126909971237183d, 0.4038778245449066d, 0.3952528536319733d,
		0.3868120610713959d, 0.3785515129566193d, 0.3704673945903778d, 0.3625559210777283d,
		0.3548133969306946d, 0.3472362160682678d, 0.3398208320140839d, 0.3325638175010681d,
		0.3254617750644684d, 0.3185114264488220d, 0.3117094635963440d, 0.3050527870655060d,
		0.2985382676124573d, 0.2921628654003143d, 0.2859236001968384d, 0.2798175811767578d,
		0.2738419771194458d, 0.2679939568042755d, 0.2622708380222321d, 0.2566699385643005d,
		0.2511886358261108d, 0.2458244115114212d, 0.2405747324228287d, 0.2354371547698975d,
		0.2304092943668366d, 0.2254888117313385d, 0.2206734120845795d, 0.2159608304500580d,
		0.2113489061594009d, 0.2068354636430740d, 0.2024184018373489d, 0.1980956792831421d,
		0.1938652694225311d, 0.1897251904010773d, 0.1856735348701477d, 0.1817083954811096d,
		0.1778279393911362d, 0.1740303486585617d, 0.1703138649463654d, 0.1666767448186874d,
		0.1631172895431519d, 0.1596338599920273d, 0.1562248021364212d, 0.1528885662555695d,
		0.1496235728263855d, 0.1464282870292664d, 0.1433012634515762d, 0.1402409970760346d,
		0.1372461020946503d, 0.1343151479959488d, 0.1314467936754227d, 0.1286396980285645d,
		0.1258925348520279d, 0.1232040524482727d, 0.1205729842185974d, 0.1179980933666229d,
		0.1154781952500343d, 0.1130121126770973d, 0.1105986908078194d, 0.1082368120551109d,
		0.1059253737330437d, 0.1036632955074310d, 0.1014495193958283d, 0.0992830246686935d,
		0.0971627980470657d, 0.0950878411531448d, 0.0930572077631950d, 0.0910699293017387d,
		0.0891250967979431d, 0.0872217938303947d, 0.0853591337800026d, 0.0835362523794174d,
		0.0817523002624512d, 0.0800064504146576d, 0.0782978758215904d, 0.0766257941722870d,
		0.0749894231557846d, 0.0733879879117012d, 0.0718207582831383d, 0.0702869966626167d,
		0.0687859877943993d, 0.0673170387744904d, 0.0658794566988945d, 0.0644725710153580d
	};
	
	/**
	 * For the patterndisplay: retrieve a String for the given note index
	 * @param index
	 * @return
	 */
	public static String getNoteNameForIndex(final int index)
	{
		if (index==0) return "...";  // No Note
		if (index==KEY_OFF) return "==="; // Key Off
		if (index==NOTE_CUT) return "^^^"; // Note cut value
		if (index==NOTE_FADE) return "~~~"; // Note Fade value
		return ((new StringBuilder(noteStrings[(index-1)%12])).append((index-1)/12)).toString();
	}
	/**
	 * get the index for the note
	 * @param period
	 * @return
	 */
	public static int getNoteIndexForPeriod(final int period)
	{
		if (period==0) return 0;				// No Note
		if (period==KEY_OFF) return KEY_OFF;
		if (period==NOTE_CUT) return NOTE_CUT;
		if (period==NOTE_FADE) return NOTE_FADE;
		int i=0;
		while (i<noteValues.length && period<noteValues[i]) i++;
		if (i>=noteValues.length)
			return 0;
		else
			return i;
	}
	/**
	 * For the patterndisplay: retrieve a String for the given period
	 * @param period
	 * @return
	 */
	public static String getNoteNameForPeriod(final int period)
	{
		return getNoteNameForIndex(getNoteIndexForPeriod(period));
	}
	/**
	 * Displays a value as a hex-value, using #digits
	 * @param value
	 * @param digits
	 * @return
	 */
	public static String getAsHex(final int value, final int digits)
	{
		StringBuilder result = new StringBuilder();
		String hex = Integer.toString(value, 16).toUpperCase();
		for (int i=0; i<digits-hex.length(); i++) result.append('0');
		return (result.append(hex)).toString();
	}
	// Konversions for read bytes! *********************************************
//	/**
//	 * Converts an Intel like stored word to an integer
//	 * @param buf
//	 * @param offset
//	 * @return
//	 */
//	public static int convertIntelWordToInt(final byte[] buf, final int offset)
//	{
//		return (buf[offset]&0xFF) | ((buf[offset+1]&0xFF)<<8);
//	}
//	/**
//	 * Converts an Intel like stored 3 Byte  to an integer
//	 * @param buf
//	 * @param offset
//	 * @return
//	 */
//	public static int convertIntel3ByteToInt(final byte[] buf, final int offset)
//	{
//		return (buf[offset]&0xFF) | ((buf[offset+1]&0xFF)<<8) | ((buf[offset+2]&0xFF)<<16);
//	}
//	/**
//	 * Converts an Intel like stored dword to an integer (less significant byte first)
//	 * @param buf
//	 * @param offset
//	 * @return
//	 */
//	public static int convertIntelDWordToInt(final byte[] buf, final int offset)
//	{
//		return (buf[offset]&0xFF) | ((buf[offset+1]&0xFF)<<8) | ((buf[offset+2]&0xFF)<<16) | ((buf[offset+3]&0xFF)<<24);
//	}
//	/**
//	 * Converts an Motorola 86000er word to an integer
//	 * @param buf
//	 * @param offset
//	 * @return
//	 */
//	public static int convertWordToInt(final byte[] buf, final int offset)
//	{
//		return ((buf[offset]&0xFF)<<8) | (buf[offset+1]&0xFF);
//	}
//	/**
//	 * Converts an Motorola 86000er 3 Byte to an integer
//	 * @param buf
//	 * @param offset
//	 * @return
//	 */
//	public static int convert3ByteToInt(final byte[] buf, final int offset)
//	{
//		return ((buf[offset]&0xFF)<<16) | ((buf[offset+1]&0xFF)<<8) | (buf[offset+2]&0xFF);
//	}
	/**
	 * Converts an intel dword array to an integer (most significant byte first)
	 * @param buf
	 * @param offset
	 * @return
	 */
	public static int convertDWordToInt(final byte[] buf, final int offset)
	{
		return (buf[offset]&0xFF) | ((buf[offset+1]&0xFF)<<8) | ((buf[offset+2]&0xFF)<<16) | ((buf[offset+3]&0xFF)<<24);
	}

	// Konversions for Sampledata! *********************************************
//	/**
//	 * converts signed 8 bit values to signed 16 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteSigned8BitToSigned16Bit(final long sample)
//	{
//		return sample<<8;
//	}
//	/**
//	 * converts signed 8 bit values to signed 24 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteSigned8BitToSigned24Bit(final long sample)
//	{
//		return sample<<16;
//	}
	/**
	 * converts signed 8 bit values to signed 32 bit
	 * @param sample
	 * @return
	 */
	public static long promoteSigned8BitToSigned32Bit(final long sample)
	{
		return sample<<24;
	}
//	/**
//	 * converts signed 16 bit values to signed 24 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteSigned16BitToSigned24Bit(final long sample)
//	{
//		return sample<<8;
//	}
	/**
	 * converts signed 16 bit values to signed 32 bit
	 * @param sample
	 * @return
	 */
	public static long promoteSigned16BitToSigned32Bit(final long sample)
	{
		return sample<<16;
	}
//	/**
//	 * converts unsigned 8 bit values to signed 16 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteUnsigned8BitToSigned16Bit(final long sample)
//	{
//		return (((sample)&0xFF)-0x80)<<8;
//	}
//	/**
//	 * converts unsigned 16 bit values to signed 16 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteUnsigned16BitToSigned16Bit(final long sample)
//	{
//		return (sample&0xFFFF)-0x8000;
//	}
//	/**
//	 * converts unsigned 8 bit values to signed 24 bit
//	 * @since 26.05.2006
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteUnsigned8BitToSigned24Bit(final long sample)
//	{
//		return (((sample)&0xFF)-0x80)<<16;
//	}
//	/**
//	 * converts unsigned 16 bit values to signed 24 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteUnsigned16BitToSigned24Bit(final long sample)
//	{
//		return ((sample&0xFFFF)-0x8000)<<8;
//	}
	/**
	 * converts unsigned 8 bit values to signed 32 bit
	 * @since 26.05.2006
	 * @param sample
	 * @return
	 */
	public static long promoteUnsigned8BitToSigned32Bit(final long sample)
	{
		return (((sample)&0xFF)-0x80)<<24;
	}
	/**
	 * converts unsigned 16 bit values to signed 32 bit
	 * @param sample
	 * @return
	 */
	public static long promoteUnsigned16BitToSigned32Bit(final long sample)
	{
		return ((sample&0xFFFF)-0x8000)<<16;
	}
//	/**
//	 * converts unsigned 24 bit values to signed 24 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteUnsigned24BitToSigned24Bit(final long sample)
//	{
//		return (sample&0xFFFFFF)-0x800000;
//	}
//	/**
//	 * converts signed 16 bit values to unsigned 8 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteSigned16BitToUnsigned8Bit(final long sample)
//	{
//		return ((sample>>8)+0x80)&0xFF;
//	}
//	/**
//	 * converts signed 24 bit values to unsigned 24 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteSigned24BitToUnsigned24Bit(final long sample)
//	{
//		return (sample+0x800000)&0xFFFFFF;
//	}
//	/**
//	 * converts unsigned 32 bit values to signed 32 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteUnsigned32BitToSigned32Bit(final long sample)
//	{
//		return (sample&0xFFFFFFFF)-0x80000000;
//	}
//	/**
//	 * converts signed 32 bit values to unsigned 32 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteSigned32BitToUnsigned32Bit(final long sample)
//	{
//		return (sample+0x80000000)&0xFFFFFFFF;
//	}
}